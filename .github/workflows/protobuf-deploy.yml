name: Protobuf Deployment
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  compile-go:
    uses:  tommzn/github-ci/.github/workflows/go.protobuf.complie.yml@v1.0.49
    secrets:
      cr-pat: ${{ secrets.PUSH_TOKEN }}
      slack-channel: ${{ secrets.SLACK_CHANNEL }}
      slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
    with:
      upload-artifact: true

  deploy-go:
    name: Update Golang Events
    runs-on: ubuntu-latest
    needs: compile-go
    continue-on-error: true
    env:
      GOLANG_EVENTS_REPO: ${{ secrets.TARGET_REPO }}
    steps:
      - name: Set version tag
        id: release
        run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\/}
      - name: Checkout Golang events lib
        uses: actions/checkout@v2
        with:
          repository: ${{ env.GOLANG_EVENTS_REPO }}
          ref: main
      - name: Download Golang events
        uses: actions/download-artifact@v2
        with:
          name: golang-events
      - name: Add Changes
        env:
          REPO_KEY: ${{ secrets.PUSH_TOKEN }}
          USERNAME: ${{ secrets.PUSH_USER }}
          EMAIL: ${{ secrets.PUSH_EMAIL }}
        run: |
          git config --global user.name $USERNAME
          git config --global user.email $EMAIL
          git add -A
          git commit --allow-empty -am "Updated by $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA"
          git tag ${{ steps.release.outputs.tag }}
          git config -l | grep 'http\..*\.extraheader' | cut -d= -f1 | xargs -L1 git config --unset-all
          git push --force --tags "https://$USERNAME:$REPO_KEY@github.com/$GOLANG_EVENTS_REPO" main:main
      - name: Create Release
        uses: ncipollo/release-action@v1
        if: success() && startsWith(github.ref, 'refs/tags/')
        with:
          draft: false
          prerelease: false
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          makeLatest: true
          body: "Release ${{ github.ref_name }} (auto generated)"
          token: ${{ secrets.PUSH_TOKEN }}
      - name: Slack Notify
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "Protobuf Deployment"
          SLACK_MESSAGE: "${{ job.status }} on protobuf deployment for ${{ github.ref_type }}: ${{ github.ref_name }}"
          SLACK_USERNAME: "GitHub Notifications"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          MSG_MINIMAL: event,actions url,commit 
